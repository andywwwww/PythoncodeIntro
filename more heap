class priorityQueue:
    def __init__(self):
        self.heap=[]
        self.size = 0

    def __len__(self):
        return self.size

    
    # Copy the body of parent, leftChild, rightChild
    #   and insert from EX10_13 or vLec10_20
    def parent(self,index):
        if index > 1 or index <= self.size:
            return self.heap[index // 2 - 1]
        else:
            return None

        
    def leftChild(self,index):
        if index<1 or 2*index>self.size:
            return None
        else:
            return self.heap[2*index - 1]


    def rightChild(self,index):
        if index<1 or 2*index+1>self.size:
            return None
        else:
            return self.heap[2*index]

    def swap(self, index1, index2):
        self.heap[index1-1], self.heap[index2-1] = self.heap[index2-1], self.heap[index1-1]
        
    def insert(self,x):
        #increase size in prep for additional variable 
        self.size += 1    
        #add new x to heap
        self.heap.append(x)
        #make the index the last spot in heap
        index = self.size
        #continue moving around until index reaches end or as long as parent index is greader than current index
        while (self.parent(index)) < (self.heap[index - 1]) and index > 1:
        #take center of hierarchy position and divide by two
            par_index = index // 2   
        #swap the new component and parent component
            self.swap(index, par_index)         
        #now set the old parental index to main index variable
            index = par_index

    def deleteMax(self):
        # The function returns the largest integer in self.heap if exists,
        #   otherwise None
        # After the maximum is deleted from self.heap,
        #   it must satisfy the heap property.
        if self.size<=0:
            return None
        elif self.size==1:
            self.size=0
            return self.heap[0]
        #--- code the remaining -----
        top = self.heap[0]
        self.heap[0] = self.heap[self.size-1]
        del self.heap[-1]
        self.size -= 1
        index = 1

        while ((self.leftChild(index) and self.leftChild(index) > self.heap[index-1]) or (self.rightChild(index) and self.rightChild(index) > self.heap[index-1])) and index <= self.size:

            if self.leftChild(index) and self.rightChild(index) and self.leftChild(index) > self.rightChild(index):
                self.swap(index, 2*index)
                index = index * 2
            elif self.leftChild(index) and self.rightChild(index) and self.leftChild(index) < self.rightChild(index):
                self.swap(index, 2*index+1)
                index = 2*index+1
            else:
                self.swap(index, 2*index)
                index = 2*index
            return top
        '''
        del self.heap[0]
        self.size -= 1
        index = self.size
        
        while ((self.leftChild(index) and self.leftChild(index) > self.heap[index-1]) or (self.rightChild(index) and self.rightChild(index) > self.heap[index-1]))and index <= self.size:
            if self.leftChild(index) and self.rightChild(index) and self.leftChild(index) > self.rightChild(index) :
                self.swap(index, child_index)
                child_index = 2*index
                print(self.leftChild(),self.rightChild())
            elif self.leftChild(index) and self.rightChild(index) and self.leftChild(index) < self.rightChild(index) :
                self.swap(index, child_index+1)
                index = child_index+1
            else:
                self.swap(index, child_index)
                child_index = 2*index
        while (self.parent(index)) < (self.heap[index - 1]) and index > 1:      
            par_index = index // 2 
            self.swap(index, par_index)
            index = par_index
            self.size -= 1
   '''             
        
        

def heapSort(intList):
    out = []
    h = priorityQueue()
    # Sort intList into out, and return out
    # Your code must use h.insert and h.deletemax,
    #   and must not use the sort method of any list.
    # Also do not change the lines above and the last line
    #---- code -----
    for item in intList:
        h.insert(item)
    for i in range(len(intList)):
        out[:0] = [h.deleteMax()]

    #---- until here ---
    return out


       

#Test code
h = priorityQueue()
h.insert(10)
h.insert(5)
h.insert(14)
h.insert(9)
h.insert(2)
h.insert(11)
h.insert(6)
print(set(h.heap[0:h.size]))
print(h.heap)
x = h.deleteMax()
print(set(h.heap[0:h.size]))
print(h.heap)
x = h.deleteMax()
print(set(h.heap[0:h.size]))
x = h.deleteMax()
print(set(h.heap[0:h.size]))
### This should print out
#{2, 5, 6, 9, 10, 11, 14}
#{2, 5, 6, 9, 10, 11}
#{2, 5, 6, 9, 10}
#{9, 2, 5, 6}
# They are sets rather than lists, whose maximums are deleted one by one
print(heapSort([13, 4, 15, 9, 17, 6, 1, 8, 16, 3, 7]))
### The output should be
#[1, 3, 4, 6, 7, 8, 9, 13, 15, 16, 17]

